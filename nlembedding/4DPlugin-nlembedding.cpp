/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-nlembedding.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : nlembedding
 #	author : marchand eric
 #
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-nlembedding.h"

#pragma mark -

static void OnStart() {
}

static void OnExit() {
}

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
	
	try
	{
		switch(selector)
		{
			case kInitPlugin :
			case kServerInitPlugin :
				OnStart();
				break;
				
			case kDeinitPlugin :
			case kServerDeinitPlugin :
				OnExit();
				break;
				
				// --- nlembedding
				
			case 1 :
				word_embedding(params);
				break;
			case 2 :
				sentence_embedding(params);
				break;

		}

	}
	catch(...)
	{

	}
}

#pragma mark -


#pragma mark -

static NSString *getInput(PA_PluginParameters params) {

	C_TEXT param;
	param.fromParamAtIndex((PackagePtr)params->fParameters, 1);
	return param.copyUTF16String();
}

static NLLanguage getLanguage(PA_PluginParameters params) {

	C_TEXT param;
	param.fromParamAtIndex((PackagePtr)params->fParameters, 2);
	if (param.getUTF16Length() == 0) {
		return NLLanguageEnglish; // default language
	}
	return param.copyUTF16String();
}

static void createEmbeddingVector(NLEmbedding *embedder, NSString *input, PA_PluginParameters params) {
	NSArray<NSNumber *>* vector = [embedder vectorForString: input];
	if([vector count] == 0) {
		return;
	}

	PA_CollectionRef embeddings = PA_CreateCollection();
	for(NSUInteger i = 0; i < [vector count]; ++i)
	{
		NSNumber* number = [vector objectAtIndex:i];
		double real = [number doubleValue];

		PA_Variable variable = PA_CreateVariable(eVK_Real);
		PA_SetRealVariable(&variable, real);
		PA_SetCollectionElement(embeddings, PA_GetCollectionLength(embeddings), variable);
		PA_ClearVariable(&variable);
	}
	PA_ReturnCollection(params, embeddings);
}

void word_embedding(PA_PluginParameters params) {
	NSString * input = getInput(params);
	if(input == nullptr) {
		return;
	}
	NLLanguage language = getLanguage(params);
	if(language == nullptr) {
		return;
	}
	NLEmbedding * embedder = [NLEmbedding wordEmbeddingForLanguage: language];
	if(embedder == nullptr) {
		return;
	}
	createEmbeddingVector(embedder, input, params);
}

void sentence_embedding(PA_PluginParameters params) {
	NSString * input = getInput(params);
	if(input == nullptr) {
		return;
	}
	NLLanguage language = getLanguage(params);
	if(language == nullptr) {
		return;
	}
	NLEmbedding* embedder = [NLEmbedding sentenceEmbeddingForLanguage: language];
	if(embedder == nullptr) {
		return;
	}
	createEmbeddingVector(embedder, input, params);
}
